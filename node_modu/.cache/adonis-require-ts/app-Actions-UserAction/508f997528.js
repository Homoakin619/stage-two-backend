"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserActions = void 0;
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class UserActions {
    static async createUser(userCreationPayload) {
        const { createPayload, dbTransactionOptions } = userCreationPayload;
        const user = new User_1.default();
        user.fill(createPayload);
        if (dbTransactionOptions.useTransaction) {
            user.useTransaction(dbTransactionOptions.dbTransaction);
        }
        await user.save();
        return user;
    }
    static async getUserRecord(userRecordOptions) {
        const { identifier, identifierType } = userRecordOptions;
        const GetRecord = {
            id: async () => await this.getUserRecordById(Number(identifier)),
            userId: async () => await this.getUserRecordByUserId(String(identifier)),
            email: async () => await this.getUserRecordByEmail(String(identifier))
        };
        return await GetRecord[identifierType]();
    }
    static async getUserRecordById(identifier) {
        return User_1.default.query().where('id', identifier).first();
    }
    static async getUserRecordByUserId(identifier) {
        return User_1.default.query().where('userId', identifier).first();
    }
    static async getUserRecordByEmail(identifier) {
        return User_1.default.query().where('email', identifier).first();
    }
    static async getOrganisationUserRecord({ identifier, userId }) {
        const userOrganisationsIds = (await User_1.default.query().where('userId', userId).preload('organisations').first())?.organisations.map(organisation => organisation.id);
        return User_1.default.query()
            .where('userId', identifier)
            .whereHas('organisations', (query) => {
            query.whereIn("organisations.id", userOrganisationsIds);
        }).first();
    }
    static async fetchUserOrganisations(userId) {
        const user = await User_1.default.query().where("userId", userId).preload('organisations').first();
        const organisations = user.organisations.map(organisation => (organisation.forClient()));
        return organisations;
    }
}
exports.UserActions = UserActions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlckFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlVzZXJBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaUZBQW1DO0FBSW5DLE1BQWEsV0FBVztJQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLG1CQUErQztRQUMxRSxNQUFNLEVBQUUsYUFBYSxFQUFFLG9CQUFvQixFQUFFLEdBQUcsbUJBQW1CLENBQUE7UUFDbkUsTUFBTSxJQUFJLEdBQUcsSUFBSSxjQUFJLEVBQUUsQ0FBQTtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBRXhCLElBQUksb0JBQW9CLENBQUMsY0FBYyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLENBQUE7U0FDMUQ7UUFDRCxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUVqQixPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxpQkFBd0M7UUFDdEUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQTtRQUV4RCxNQUFNLFNBQVMsR0FBRztZQUNkLEVBQUUsRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNoRSxNQUFNLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDeEUsS0FBSyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3pFLENBQUE7UUFFRCxPQUFPLE1BQU0sU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUE7SUFDNUMsQ0FBQztJQUVPLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsVUFBa0I7UUFDckQsT0FBTyxjQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUN2RCxDQUFDO0lBRU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxVQUFrQjtRQUN6RCxPQUFPLGNBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQzNELENBQUM7SUFFTyxNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLFVBQWtCO1FBQ3hELE9BQU8sY0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDMUQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFzQztRQUVuRyxNQUFNLG9CQUFvQixHQUFHLENBQUMsTUFBTSxjQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBRSxDQUFBO1FBRS9KLE9BQU8sY0FBSSxDQUFDLEtBQUssRUFBRTthQUNOLEtBQUssQ0FBQyxRQUFRLEVBQUMsVUFBVSxDQUFDO2FBQzFCLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNqQyxLQUFLLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFDLG9CQUFvQixDQUFDLENBQUE7UUFDMUQsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7SUFFMUIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsTUFBYztRQUNyRCxNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN4RixNQUFNLGFBQWEsR0FBRyxJQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN6RixPQUFPLGFBQWEsQ0FBQTtJQUN4QixDQUFDO0NBR0o7QUF6REQsa0NBeURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFVzZXIgZnJvbSBcIkFwcC9Nb2RlbHMvVXNlclwiO1xuaW1wb3J0IENyZWF0ZU5ld1VzZXJSZWNvcmRPcHRpb25zIGZyb20gXCJBcHAvVHlwZUNoZWNraW5nL0NyZWF0ZU5ld1VzZXJSZWNvcmRPcHRpb25zXCI7XG5pbXBvcnQgVXNlcklkZW50aWZpZXJPcHRpb25zIGZyb20gXCJBcHAvVHlwZUNoZWNraW5nL09wdGlvbnMvVXNlcklkZW50aWZpZXJPcHRpb25zXCI7XG5cbmV4cG9ydCBjbGFzcyBVc2VyQWN0aW9ucyB7XG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBjcmVhdGVVc2VyKHVzZXJDcmVhdGlvblBheWxvYWQ6IENyZWF0ZU5ld1VzZXJSZWNvcmRPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgY3JlYXRlUGF5bG9hZCwgZGJUcmFuc2FjdGlvbk9wdGlvbnMgfSA9IHVzZXJDcmVhdGlvblBheWxvYWRcbiAgICAgICAgY29uc3QgdXNlciA9IG5ldyBVc2VyKClcbiAgICAgICAgdXNlci5maWxsKGNyZWF0ZVBheWxvYWQpXG5cbiAgICAgICAgaWYgKGRiVHJhbnNhY3Rpb25PcHRpb25zLnVzZVRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICB1c2VyLnVzZVRyYW5zYWN0aW9uKGRiVHJhbnNhY3Rpb25PcHRpb25zLmRiVHJhbnNhY3Rpb24pXG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdXNlci5zYXZlKClcblxuICAgICAgICByZXR1cm4gdXNlclxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0VXNlclJlY29yZCh1c2VyUmVjb3JkT3B0aW9uczogVXNlcklkZW50aWZpZXJPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgaWRlbnRpZmllciwgaWRlbnRpZmllclR5cGUgfSA9IHVzZXJSZWNvcmRPcHRpb25zXG4gICAgICAgIFxuICAgICAgICBjb25zdCBHZXRSZWNvcmQgPSB7XG4gICAgICAgICAgICBpZDogYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5nZXRVc2VyUmVjb3JkQnlJZChOdW1iZXIoaWRlbnRpZmllcikpLFxuICAgICAgICAgICAgdXNlcklkOiBhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmdldFVzZXJSZWNvcmRCeVVzZXJJZChTdHJpbmcoaWRlbnRpZmllcikpLFxuICAgICAgICAgICAgZW1haWw6IGFzeW5jICgpID0+IGF3YWl0IHRoaXMuZ2V0VXNlclJlY29yZEJ5RW1haWwoU3RyaW5nKGlkZW50aWZpZXIpKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IEdldFJlY29yZFtpZGVudGlmaWVyVHlwZV0oKVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIGdldFVzZXJSZWNvcmRCeUlkKGlkZW50aWZpZXI6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gVXNlci5xdWVyeSgpLndoZXJlKCdpZCcsIGlkZW50aWZpZXIpLmZpcnN0KClcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBhc3luYyBnZXRVc2VyUmVjb3JkQnlVc2VySWQoaWRlbnRpZmllcjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBVc2VyLnF1ZXJ5KCkud2hlcmUoJ3VzZXJJZCcsIGlkZW50aWZpZXIpLmZpcnN0KClcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBhc3luYyBnZXRVc2VyUmVjb3JkQnlFbWFpbChpZGVudGlmaWVyOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIFVzZXIucXVlcnkoKS53aGVyZSgnZW1haWwnLCBpZGVudGlmaWVyKS5maXJzdCgpXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0T3JnYW5pc2F0aW9uVXNlclJlY29yZCh7aWRlbnRpZmllciwgdXNlcklkfTp7aWRlbnRpZmllcjogc3RyaW5nLCB1c2VySWQ6IHN0cmluZ30pIHtcblxuICAgICAgICBjb25zdCB1c2VyT3JnYW5pc2F0aW9uc0lkcyA9IChhd2FpdCBVc2VyLnF1ZXJ5KCkud2hlcmUoJ3VzZXJJZCcsIHVzZXJJZCkucHJlbG9hZCgnb3JnYW5pc2F0aW9ucycpLmZpcnN0KCkpPy5vcmdhbmlzYXRpb25zLm1hcChvcmdhbmlzYXRpb24gPT4gb3JnYW5pc2F0aW9uLmlkKSFcblxuICAgICAgICByZXR1cm4gVXNlci5xdWVyeSgpXG4gICAgICAgICAgICAgICAgICAgIC53aGVyZSgndXNlcklkJyxpZGVudGlmaWVyKVxuICAgICAgICAgICAgICAgICAgICAud2hlcmVIYXMoJ29yZ2FuaXNhdGlvbnMnLCAocXVlcnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LndoZXJlSW4oXCJvcmdhbmlzYXRpb25zLmlkXCIsdXNlck9yZ2FuaXNhdGlvbnNJZHMpXG4gICAgICAgICAgICAgICAgICAgIH0pLmZpcnN0KClcblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZmV0Y2hVc2VyT3JnYW5pc2F0aW9ucyh1c2VySWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5xdWVyeSgpLndoZXJlKFwidXNlcklkXCIsdXNlcklkKS5wcmVsb2FkKCdvcmdhbmlzYXRpb25zJykuZmlyc3QoKTtcbiAgICAgICAgY29uc3Qgb3JnYW5pc2F0aW9ucyA9IHVzZXIhLm9yZ2FuaXNhdGlvbnMubWFwKG9yZ2FuaXNhdGlvbiA9PiAob3JnYW5pc2F0aW9uLmZvckNsaWVudCgpKSlcbiAgICAgICAgcmV0dXJuIG9yZ2FuaXNhdGlvbnNcbiAgICB9XG5cblxufSJdfQ==