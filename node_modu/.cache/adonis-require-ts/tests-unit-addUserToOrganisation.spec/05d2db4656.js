"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const runner_1 = require("@japa/runner");
const sinon_1 = __importDefault(require("sinon"));
const AddUserToOrganisationController_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Controllers/Http/AddUserToOrganisationController"));
const OrganisationAction_1 = global[Symbol.for('ioc.use')]("App/Actions/OrganisationAction");
const UserAction_1 = global[Symbol.for('ioc.use')]("App/Actions/UserAction");
const StatusCodes_1 = global[Symbol.for('ioc.use')]("App/Helpers/StatusCodes");
const Organisation_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Organisation"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
runner_1.test.group('AddUserToOrganisationController', (group) => {
    let sandbox;
    group.setup(() => {
        sandbox = sinon_1.default.createSandbox();
    });
    group.teardown(() => {
        sandbox.restore();
    });
    (0, runner_1.test)('should add user to organisation successfully', async ({ assert }) => {
        const controller = new AddUserToOrganisationController_1.default();
        const organisation = new Organisation_1.default();
        organisation.fill({ orgId: 'organisation-id', description: "nice organisation", name: "new organisation" });
        const newUser = new User_1.default();
        newUser.fill({
            userId: 'users-id',
            email: 'johns.doe@examples.com',
            password: 'password123',
            firstName: "johns",
            lastName: "doe",
            phone: "09123456789"
        });
        const user = new User_1.default();
        user.fill({
            userId: 'user-id',
            email: 'john.doe@example.com',
            password: 'password123',
            firstName: "john",
            lastName: "doe",
            phone: "09123456789"
        });
        await OrganisationAction_1.OrganisationActions.addUserToOrganisation({ userId: user.id, orgId: organisation.id });
        sandbox.stub(UserAction_1.UserActions, 'fetchUserOrganisations').resolves([
            organisation
        ]);
        sandbox.stub(OrganisationAction_1.OrganisationActions, 'getOrganisationRecord').resolves(organisation);
        sandbox.stub(UserAction_1.UserActions, 'getUserRecord').resolves(user);
        sandbox.stub(OrganisationAction_1.OrganisationActions, 'addUserToOrganisation').resolves();
        const request = {
            validate: sandbox.stub().resolves(),
            param: sandbox.stub().returns('organisation-id'),
            body: sandbox.stub().returns({ userId: 'user-id' })
        };
        const response = {
            status: sandbox.stub().returnsThis(),
            send: sandbox.stub()
        };
        const auth = { user: user };
        const ctx = { request, response, auth };
        await controller.handle(ctx);
        assert.isTrue(response.status.calledWith(StatusCodes_1.HttpStatusCodeEnum.OK));
        assert.isTrue(response.send.calledWith({
            status: 'success',
            message: 'User added to organisation successfully',
        }));
    });
    (0, runner_1.test)('should return 422 if validation fails', async ({ assert }) => {
        const controller = new AddUserToOrganisationController_1.default();
        const request = {
            validate: sandbox.stub().throws({ messages: { errors: ['Validation failed'] } })
        };
        const response = {
            status: sandbox.stub().returnsThis(),
            send: sandbox.stub()
        };
        const ctx = { request, response, auth: {} };
        await controller.handle(ctx);
        assert.isTrue(response.status.calledWith(StatusCodes_1.HttpStatusCodeEnum.UNPROCESSABLE_ENTITY));
        assert.isTrue(response.send.calledWith({
            errors: ['Validation failed']
        }));
    });
    (0, runner_1.test)('should return 400 if organisation is not found for user', async ({ assert }) => {
        const controller = new AddUserToOrganisationController_1.default();
        sandbox.stub(UserAction_1.UserActions, 'fetchUserOrganisations').resolves([]);
        const request = {
            validate: sandbox.stub().resolves(),
            param: sandbox.stub().returns('organisation-id'),
            body: sandbox.stub().returns({ userId: 'user-id' })
        };
        const response = {
            status: sandbox.stub().returnsThis(),
            send: sandbox.stub()
        };
        const auth = { user: { userId: 'logged-in-user-id' } };
        const ctx = { request, response, auth };
        await controller.handle(ctx);
        assert.isTrue(response.status.calledWith(StatusCodes_1.HttpStatusCodeEnum.BAD_REQUEST));
        assert.isTrue(response.send.calledWith({
            status: 'Bad Request',
            message: 'Organisation not found for user',
            statusCode: StatusCodes_1.HttpStatusCodeEnum.BAD_REQUEST
        }));
    });
    (0, runner_1.test)('should return 500 if an error occurs', async ({ assert }) => {
        const controller = new AddUserToOrganisationController_1.default();
        sandbox.stub(UserAction_1.UserActions, 'fetchUserOrganisations').throws(new Error('Simulated error'));
        const request = {
            validate: sandbox.stub().resolves(),
            param: sandbox.stub().returns('organisation-id'),
            body: sandbox.stub().returns({ userId: 'user-id' })
        };
        const response = {
            status: sandbox.stub().returnsThis(),
            send: sandbox.stub()
        };
        const auth = { user: { userId: 'logged-in-user-id' } };
        const ctx = { request, response, auth };
        await controller.handle(ctx);
        assert.isTrue(response.status.calledWith(StatusCodes_1.HttpStatusCodeEnum.INTERNAL_SERVER_ERROR));
        assert.isTrue(response.send.calledWith({
            status: 'Error',
            message: 'Error Occured Adding User',
            statusCode: StatusCodes_1.HttpStatusCodeEnum.INTERNAL_SERVER_ERROR
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,