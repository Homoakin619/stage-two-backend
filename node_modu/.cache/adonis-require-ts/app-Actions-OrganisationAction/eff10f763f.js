"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganisationActions = void 0;
const Organisation_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Organisation"));
const OrganisationUser_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/OrganisationUser"));
class OrganisationActions {
    static async createOrganisation(organisationCreationPayload) {
        const { createPayload, dbTransactionOptions } = organisationCreationPayload;
        const organisation = new Organisation_1.default();
        organisation.fill(createPayload);
        if (dbTransactionOptions.useTransaction) {
            organisation.useTransaction(dbTransactionOptions.dbTransaction);
        }
        await organisation.save();
        return organisation;
    }
    static async getOrganisationRecord(organisationRecordOptions) {
        const { identifier, identifierType } = organisationRecordOptions;
        const GetRecord = {
            id: async () => await this.getOrganisationRecordById(Number(identifier)),
            orgId: async () => await this.getOrganisationRecordByOrganisationId(String(identifier)),
            name: async () => await this.getOrganisationRecordName(String(identifier))
        };
        return await GetRecord[identifierType]();
    }
    static async getOrganisationRecordById(identifier) {
        return Organisation_1.default.query().where('id', identifier).first();
    }
    static async getOrganisationRecordByOrganisationId(identifier) {
        return Organisation_1.default.query().where('orgId', identifier).first();
    }
    static async getOrganisationRecordName(identifier) {
        return Organisation_1.default.query().where('name', identifier).first();
    }
    static async addUserToOrganisation({ userId, orgId }) {
        const userOrganisationInstance = new OrganisationUser_1.default();
        userOrganisationInstance.fill({ userId, orgId });
        return await userOrganisationInstance.save();
    }
}
exports.OrganisationActions = OrganisationActions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3JnYW5pc2F0aW9uQWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiT3JnYW5pc2F0aW9uQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGlHQUFtRDtBQUNuRCx5R0FBMkQ7QUFJM0QsTUFBYSxtQkFBbUI7SUFDckIsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQywyQkFBK0Q7UUFDbEcsTUFBTSxFQUFFLGFBQWEsRUFBRSxvQkFBb0IsRUFBRSxHQUFHLDJCQUEyQixDQUFBO1FBQzNFLE1BQU0sWUFBWSxHQUFHLElBQUksc0JBQVksRUFBRSxDQUFBO1FBRXZDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7UUFFaEMsSUFBSSxvQkFBb0IsQ0FBQyxjQUFjLEVBQUU7WUFDckMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsQ0FBQTtTQUNsRTtRQUNELE1BQU0sWUFBWSxDQUFDLElBQUksRUFBRSxDQUFBO1FBRXpCLE9BQU8sWUFBWSxDQUFBO0lBQ3ZCLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLHlCQUF3RDtRQUM5RixNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxHQUFHLHlCQUF5QixDQUFBO1FBRWhFLE1BQU0sU0FBUyxHQUFHO1lBQ2QsRUFBRSxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsTUFBTSxJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3hFLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLE1BQU0sSUFBSSxDQUFDLHFDQUFxQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN2RixJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDN0UsQ0FBQTtRQUVELE9BQU8sTUFBTSxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQTtJQUM1QyxDQUFDO0lBRU8sTUFBTSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxVQUFrQjtRQUM3RCxPQUFPLHNCQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUMvRCxDQUFDO0lBRU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxVQUFrQjtRQUN6RSxPQUFPLHNCQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNsRSxDQUFDO0lBRU8sTUFBTSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxVQUFrQjtRQUM3RCxPQUFPLHNCQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNqRSxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWtDO1FBQ3RGLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSwwQkFBZ0IsRUFBRSxDQUFBO1FBQ3ZELHdCQUF3QixDQUFDLElBQUksQ0FBQyxFQUFDLE1BQU0sRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFBO1FBRTdDLE9BQU8sTUFBTSx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNoRCxDQUFDO0NBR0o7QUEvQ0Qsa0RBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9yZ2FuaXNhdGlvbiBmcm9tIFwiQXBwL01vZGVscy9PcmdhbmlzYXRpb25cIjtcbmltcG9ydCBPcmdhbmlzYXRpb25Vc2VyIGZyb20gXCJBcHAvTW9kZWxzL09yZ2FuaXNhdGlvblVzZXJcIjtcbmltcG9ydCBDcmVhdGVOZXdPcmdhbmlzYXRpb25SZWNvcmRPcHRpb25zIGZyb20gXCJBcHAvVHlwZUNoZWNraW5nL0NyZWF0ZU5ld09yZ2FuaXNhdGlvblJlY29yZE9wdGlvbnNcIjtcbmltcG9ydCBPcmdhbmlzYXRpb25JZGVudGlmaWVyT3B0aW9ucyBmcm9tIFwiQXBwL1R5cGVDaGVja2luZy9PcHRpb25zL09yZ2FuaXNhdGlvbklkZW50aWZpZXJPcHRpb25zXCI7XG5cbmV4cG9ydCBjbGFzcyBPcmdhbmlzYXRpb25BY3Rpb25zIHtcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGNyZWF0ZU9yZ2FuaXNhdGlvbihvcmdhbmlzYXRpb25DcmVhdGlvblBheWxvYWQ6IENyZWF0ZU5ld09yZ2FuaXNhdGlvblJlY29yZE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBjcmVhdGVQYXlsb2FkLCBkYlRyYW5zYWN0aW9uT3B0aW9ucyB9ID0gb3JnYW5pc2F0aW9uQ3JlYXRpb25QYXlsb2FkXG4gICAgICAgIGNvbnN0IG9yZ2FuaXNhdGlvbiA9IG5ldyBPcmdhbmlzYXRpb24oKVxuXG4gICAgICAgIG9yZ2FuaXNhdGlvbi5maWxsKGNyZWF0ZVBheWxvYWQpXG5cbiAgICAgICAgaWYgKGRiVHJhbnNhY3Rpb25PcHRpb25zLnVzZVRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICBvcmdhbmlzYXRpb24udXNlVHJhbnNhY3Rpb24oZGJUcmFuc2FjdGlvbk9wdGlvbnMuZGJUcmFuc2FjdGlvbilcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBvcmdhbmlzYXRpb24uc2F2ZSgpXG5cbiAgICAgICAgcmV0dXJuIG9yZ2FuaXNhdGlvblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0T3JnYW5pc2F0aW9uUmVjb3JkKG9yZ2FuaXNhdGlvblJlY29yZE9wdGlvbnM6IE9yZ2FuaXNhdGlvbklkZW50aWZpZXJPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgaWRlbnRpZmllciwgaWRlbnRpZmllclR5cGUgfSA9IG9yZ2FuaXNhdGlvblJlY29yZE9wdGlvbnNcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IEdldFJlY29yZCA9IHtcbiAgICAgICAgICAgIGlkOiBhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmdldE9yZ2FuaXNhdGlvblJlY29yZEJ5SWQoTnVtYmVyKGlkZW50aWZpZXIpKSxcbiAgICAgICAgICAgIG9yZ0lkOiBhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmdldE9yZ2FuaXNhdGlvblJlY29yZEJ5T3JnYW5pc2F0aW9uSWQoU3RyaW5nKGlkZW50aWZpZXIpKSxcbiAgICAgICAgICAgIG5hbWU6IGFzeW5jICgpID0+IGF3YWl0IHRoaXMuZ2V0T3JnYW5pc2F0aW9uUmVjb3JkTmFtZShTdHJpbmcoaWRlbnRpZmllcikpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXdhaXQgR2V0UmVjb3JkW2lkZW50aWZpZXJUeXBlXSgpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgZ2V0T3JnYW5pc2F0aW9uUmVjb3JkQnlJZChpZGVudGlmaWVyOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIE9yZ2FuaXNhdGlvbi5xdWVyeSgpLndoZXJlKCdpZCcsIGlkZW50aWZpZXIpLmZpcnN0KClcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBhc3luYyBnZXRPcmdhbmlzYXRpb25SZWNvcmRCeU9yZ2FuaXNhdGlvbklkKGlkZW50aWZpZXI6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gT3JnYW5pc2F0aW9uLnF1ZXJ5KCkud2hlcmUoJ29yZ0lkJywgaWRlbnRpZmllcikuZmlyc3QoKVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIGdldE9yZ2FuaXNhdGlvblJlY29yZE5hbWUoaWRlbnRpZmllcjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBPcmdhbmlzYXRpb24ucXVlcnkoKS53aGVyZSgnbmFtZScsIGlkZW50aWZpZXIpLmZpcnN0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGFkZFVzZXJUb09yZ2FuaXNhdGlvbih7dXNlcklkLCBvcmdJZH06IHt1c2VySWQ6IG51bWJlciwgb3JnSWQ6IG51bWJlcn0pIHtcbiAgICAgICAgY29uc3QgdXNlck9yZ2FuaXNhdGlvbkluc3RhbmNlID0gbmV3IE9yZ2FuaXNhdGlvblVzZXIoKVxuICAgICAgICB1c2VyT3JnYW5pc2F0aW9uSW5zdGFuY2UuZmlsbCh7dXNlcklkLG9yZ0lkfSlcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBhd2FpdCB1c2VyT3JnYW5pc2F0aW9uSW5zdGFuY2Uuc2F2ZSgpXG4gICAgfVxuXG4gICAgXG59Il19